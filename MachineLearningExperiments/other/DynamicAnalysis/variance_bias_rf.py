import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.utils import resample
import pandas as pd
import warnings
warnings.filterwarnings("ignore")


data = pd.read_csv('apk_dataset.csv',
                   names=['APK Name', 'SHA Key', 'Timestamp', 'Malware Label', 'Frequency of System Calls',
                          'Count of DNS requests', 'Count of outbound connections', 'Domains/IPs contacted',
                          'Data volume sent', 'Data volume received', 'Number of files created', 'Number of files read',
                          'Number of files deleted', 'Process spawning', 'Loaded DLLs', 'Intents sent',
                          'Intents received', 'Checks for root privileges', 'Camera access frequency',
                          'Microphone access frequency', 'GPS query frequency', 'Frequency of cryptographic API calls',
                          'Autostart entries created', 'CPU usage patterns', 'Memory usage patterns'])
df = pd.DataFrame(data)

# Set display options
pd.set_option('display.max_rows', None)  # or a large number like 5000
pd.set_option('display.max_columns', None)  # or a large number like 50
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', None)  # For wider columns

# Dropping non-numeric columns
df = df.sort_values(by='Timestamp')

df = df.drop(['APK Name', 'SHA Key', 'Timestamp'], axis=1)
df = df.drop(df.index[-1])

object_cols = ['Frequency of System Calls', 'Count of DNS requests', 'Count of outbound connections', 'Domains/IPs contacted', 'Data volume sent', 'Data volume received', 'Number of files created', 'Number of files read', 'Number of files deleted', 'Process spawning', 'Loaded DLLs', 'Intents sent', 'Intents received', 'Checks for root privileges', 'Camera access frequency', 'Microphone access frequency', 'GPS query frequency', 'Frequency of cryptographic API calls', 'Autostart entries created', 'CPU usage patterns', 'Memory usage patterns']

for col in object_cols:
    df[col] = df[col].astype(float)
# df = df.fillna(df.mean())

# Split data into features and target
X = df.drop(columns=['Malware Label'])  # Dropping the target and the timestamp columns
y = df['Malware Label'].astype(int)


# Splitting data into training and testing sets
train_size = int(0.9 * len(data))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

n_iterations = 100  # Number of bootstrap samples to create
y_pred_all = []

rf = RandomForestClassifier(max_depth=None, min_samples_split=2, n_estimators=50, random_state=42)

for i in range(n_iterations):
    X_resampled, y_resampled = resample(X_train, y_train)
    rf.fit(X_resampled, y_resampled)
    y_pred = rf.predict(X_test)
    y_pred_all.append(y_pred)

# Average predictions across all models for each instance in the test set
avg_preds = np.mean(y_pred_all, axis=0)

bias = np.mean(avg_preds - y_test)
variance = np.mean((y_pred_all - avg_preds) ** 2)


print("============RANDOM FOREST MODEL=============")
print(f"Bias: {bias}")
print(f"Variance: {variance}")
