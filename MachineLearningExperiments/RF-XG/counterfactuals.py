import pandas as pd
from sklearn import datasets
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import dice_ml
import sys

# Load and prepare the Iris dataset for binary classification
iris = datasets.load_iris()
X = iris.data
y = (iris.target != 0) * 1  # Binary classification: class 0 vs not class 0

# Create a DataFrame with feature names and add the target
df = pd.DataFrame(X, columns=iris.feature_names)
print("helllooo")
print(iris.feature_names)

print(df)
print("byyy")
df['target'] = y  # Add the target variable to the DataFrame

# Split the data
X_train, X_test, y_train, y_test = train_test_split(df[iris.feature_names], df['target'], test_size=0.3, random_state=42)


# Train a Random Forest classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)



# Setup DiCE
d = dice_ml.Data(dataframe=df, continuous_features=iris.feature_names, outcome_name='target')
m = dice_ml.Model(model=model, backend='sklearn')
exp = dice_ml.Dice(d, m)

# Sample query instance from the test set
query_instance = pd.DataFrame(X_test.iloc[10]).T
#print(query_instance.columns)
#print(y_test.iloc[0])
#row=X_test.iloc[10]

#print(f'label: {y_test.iloc[0]}')
#for column_name, value in row.items():
	#if value != 1:
		#print(f"Column Name: {column_name}")

# Setting parameters for counterfactual generation
cf_parameters = {
    "total_CFs": 3,  # Number of counterfactuals to generate
    "desired_class": "opposite",  # Asking for the opposite class
    "proximity_weight": 0.5,  # Weight for proximity loss
    "diversity_weight": 1.0  # Weight for diversity
    
}

# Generate counterfactuals
counterfactuals = exp.generate_counterfactuals(query_instance, **cf_parameters)

# Print the counterfactuals
print(counterfactuals.visualize_as_dataframe(show_only_changes=True))

# Get the original instance as a Pandas DataFrame
original_instance = pd.DataFrame(query_instance, columns=iris.feature_names)

print("Counterfactual Explanations:")
#Iterate through the counterfactuals
for i, cf in enumerate(exp.final_cfs):
    print(f"Counterfactual {i+1} (Changed Features):")
    
    # Iterate through the features and their values in the counterfactual
    for feature, cf_value, original_value in zip(iris.feature_names, cf, original_instance.iloc[0]):
        if cf_value != original_value:
            print(f"{feature}: Original={original_value}, Counterfactual={cf_value}")

