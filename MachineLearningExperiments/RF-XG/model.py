from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, f1_score,roc_auc_score, confusion_matrix
from sklearn.model_selection import GridSearchCV
import pandas as pd
from xgboost import XGBClassifier
import sys

from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectKBest, chi2
import datetime




def redirect_stdout_to_file(file_path):
    sys.stdout = open(file_path, 'w')



def prepare_data_for_classification(training_data, test_data):

    train = pd.DataFrame(training_data)
    test = pd.DataFrame(test_data)
    # Randomly shuffling the rows of the dataframes
    train = train.sample(frac=1, random_state=42)  # Setting a random seed for reproducibility
    test = test.sample(frac=1, random_state=42)  # Setting a random seed for reproducibility
    train.reset_index(drop=True, inplace=True)
    test.reset_index(drop=True, inplace=True)

    # Calculating the ratio of benign to malware APKs in training set
    malware_column_train = train['Malware']
    ratio_ones_to_zeroes = malware_column_train.value_counts(normalize=True)
    print("TRAINING SET: Ratio of Benign APKs to Malware APKs:")
    print(ratio_ones_to_zeroes)

    # Calculating the ratio of benign to malware APKs
    malware_column_test = test['Malware']
    ratio_ones_to_zeroes = malware_column_test.value_counts(normalize=True)
    print("TEST SET: Ratio of Benign APKs to Malware APKs:")
    print(ratio_ones_to_zeroes)

    
    test_sha256_list = test['sha256']
    
    # Set display options
    pd.set_option('display.max_rows', None)
    pd.set_option('display.max_columns', None)
    train = train.drop(['sha256'], axis=1)
    test = test.drop(['sha256'], axis=1)

    # Print the names of all columns
    column_names = train.columns
    column_names_list = column_names.to_list()

    for col in column_names_list:
        train[col] = train[col].astype(int)
        test[col] = test[col].astype(int)

    # Split data into features and target
    X_train = train.drop(columns=['Malware'])
    y_train = train['Malware']

    # Split data into features and target
    X_test = test.drop(columns=['Malware'])
    y_test = test['Malware']


    
    return X_train, y_train, X_test, y_test, test_sha256_list




def build_and_evaluate_model(x, y, test_sha256):
    

     # Parameter Grid for Random Forest
    param_grid_rf = {
        'n_estimators': [50, 100, 200, 500, 1000],
        'max_depth': [None, 10, 16, 20, 30, 40],
        'min_samples_split': [2, 5, 10, 20, 50]
    }


    # Define the parameter grid for XGBoost
    param_grid_xgb = {
        'n_estimators': [50, 100, 200, 500],
        'max_depth': [3, 6, 9, 12],
        'learning_rate': [0.001, 0.01, 0.1, 0.3],
        'subsample': [0.5, 0.8, 1.0],
        'colsample_bytree': [0.5, 0.8, 1.0]
    }

    rf_model = RandomForestClassifier()
    xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')

    grid_search_rf = GridSearchCV(rf_model, param_grid_rf, cv=5, verbose=2, n_jobs=-1)
    grid_search_xgb = GridSearchCV(xgb_model, param_grid_xgb, cv=5, verbose=2, n_jobs=-1)

    # Fit the models
    grid_search_rf.fit(X_train, y_train)
    grid_search_xgb.fit(X_train, y_train)

    # Predict and evaluate using the best model
    best_rf = grid_search_rf.best_estimator_
    best_xgb = grid_search_xgb.best_estimator_
    
    print("================RANDOM FOREST RESULTS===================:")
    rf_test_predictions = best_rf.predict(X_test)
    rf_train_predictions = best_rf.predict(X_train)
    
    print("Best Parameters: ", grid_search_rf.best_params_)
    
    train_accuracy = accuracy_score(y_train, rf_train_predictions)
    test_accuracy = accuracy_score(y_test, rf_test_predictions)
    
    train_precision = precision_score(y_train, rf_train_predictions)
    test_precision = precision_score(y_test, rf_test_predictions)
    
    train_recall = recall_score(y_train, rf_train_predictions)
    test_recall = recall_score(y_test, rf_test_predictions)
    
    train_f1 = f1_score(y_train, rf_train_predictions)
    test_f1 = f1_score(y_test, rf_test_predictions)
    
    train_probs = best_rf.predict_proba(X_train)[:, 1]  
    test_probs = best_rf.predict_proba(X_test)[:, 1]
    
    train_roc_auc = roc_auc_score(y_train, train_probs)
    test_roc_auc = roc_auc_score(y_test, test_probs)
    
    train_conf_matrix = confusion_matrix(y_train, rf_train_predictions)
    test_conf_matrix = confusion_matrix(y_test, rf_test_predictions)
    
    print(f"Training Accuracy: {train_accuracy}, Test Accuracy: {test_accuracy}")
    print(f"Training Precision: {train_precision}, Test Precision: {test_precision}")
    print(f"Training Recall: {train_recall}, Test Recall: {test_recall}")
    print(f"Training F1 Score: {train_f1}, Test F1 Score: {test_f1}")
    print(f"Training ROC-AUC: {train_roc_auc}, Test ROC-AUC: {test_roc_auc}")
    print(f"Training Confusion Matrix:\n{train_conf_matrix}")
    print(f"Test Confusion Matrix:\n{test_conf_matrix}")
    
    #------------------------------------
    print(classification_report(y_test, rf_test_predictions, labels=[0, 1], target_names=["Benign", "Malware"]))
    print(classification_report(y_train, rf_train_predictions, labels=[0, 1], target_names=["Benign", "Malware"]))
    
    # Create a test results DataFrame
    
    test_results_rf = pd.DataFrame({'SHA256': test_sha256, 'Actual Malware': y_test, 'Predicted label':rf_test_predictions})
    
    test_results_rf = pd.concat([test_results_rf, X_test], axis=1)
    
    test_results_rf.to_csv('test_dataset_predictions_rf.csv', index=False)
    
    
    print("================XGB BOOST RESULTS===================:")
    xgb_test_predictions = best_xgb.predict(X_test)
    xgb_train_predictions = best_xgb.predict(X_train)
    print("Best Parameters: ", grid_search_xgb.best_params_)
    
    print("Precision (Malware):", precision_score(y_test, xgb_test_predictions, pos_label=1))
    print("Recall (Malware):", recall_score(y_test, xgb_test_predictions, pos_label=1))
    print("F1 Score (Malware):", f1_score(y_test, xgb_test_predictions, pos_label=1))
    
    train_accuracy = accuracy_score(y_train, xgb_train_predictions)
    test_accuracy = accuracy_score(y_test, xgb_test_predictions)
    
    train_precision = precision_score(y_train, xgb_train_predictions)
    test_precision = precision_score(y_test, xgb_test_predictions)
    
    train_recall = recall_score(y_train, xgb_train_predictions)
    test_recall = recall_score(y_test, xgb_test_predictions)
    
    train_f1 = f1_score(y_train, xgb_train_predictions)
    test_f1 = f1_score(y_test, xgb_test_predictions)
    
    train_probs = best_xgb.predict_proba(X_train)[:, 1]  
    test_probs = best_xgb.predict_proba(X_test)[:, 1]
    
    train_roc_auc = roc_auc_score(y_train, train_probs)
    test_roc_auc = roc_auc_score(y_test, test_probs)
    
    train_conf_matrix = confusion_matrix(y_train, xgb_train_predictions)
    test_conf_matrix = confusion_matrix(y_test, xgb_test_predictions)
    
    print(f"Training Accuracy: {train_accuracy}, Test Accuracy: {test_accuracy}")
    print(f"Training Precision: {train_precision}, Test Precision: {test_precision}")
    print(f"Training Recall: {train_recall}, Test Recall: {test_recall}")
    print(f"Training F1 Score: {train_f1}, Test F1 Score: {test_f1}")
    print(f"Training ROC-AUC: {train_roc_auc}, Test ROC-AUC: {test_roc_auc}")
    print(f"Training Confusion Matrix:\n{train_conf_matrix}")
    print(f"Test Confusion Matrix:\n{test_conf_matrix}")
    
    print(classification_report(y_test, xgb_test_predictions, labels=[0, 1], target_names=["Benign", "Malware"]))
    print(classification_report(y_train, xgb_train_predictions, labels=[0, 1], target_names=["Benign", "Malware"]))
    
    
    # Create a test results DataFrame
    
    test_results_xgb = pd.DataFrame({'SHA256': test_sha256, 'Actual Malware': y_test, 'Predicted label':xgb_test_predictions})
    
    test_results_xgb = pd.concat([test_results_xgb, X_test], axis=1)
    
    test_results_xgb.to_csv('test_dataset_predictions_xgb.csv', index=False)
    
    return


 

def feature_selection_and_dataframe(input_train_path, input_test_path, target_column, k_features=500):
    # Load your dataset
    train_dataset = pd.read_csv(input_train_path)
    test_dataset = pd.read_csv(input_test_path)

    # Drop the 'sha256' and target columns for feature selection
    df_train_features = train_dataset

    # Assume 'target' is the column you want to predict
    X_train = df_train_features.drop(columns=['sha256', target_column])
    y_train = df_train_features[target_column]
    
    
    X_train_APICalls = df_train_features.drop(df_train_features.iloc[:, 0:350], axis=1)
    print(f'Size of data frame that contains API Calls is {X_train_APICalls.shape}.')
    print(f'The original number of API Calls is {X_train_APICalls.shape[1]}.')
    
    
    X_train_manifest_properties = df_train_features.drop(df_train_features.iloc[:, 350:], axis=1)
    selected_feature_manifest = list(X_train_manifest_properties.columns.values)
    print(f'Number of manifest properties is {len(selected_feature_manifest)}.')
    
    


    # Perform feature selection using chi-squared test
    selector = SelectKBest(chi2, k=k_features)
    X_train_selected = selector.fit_transform(X_train_APICalls, y_train)
    print(f'Number of selected API Calls is {k_features}.')

    # Get the indices of the selected features
    selected_indices = selector.get_support(indices=True)

    # Get the names of the selected features
    selected_feature_names_api_calls = X_train_APICalls.columns[selected_indices]

    # 'sha256' and 'malware' columns are already included in the selected_feature_manifest
    selected_feature_names = list(selected_feature_manifest)+list(selected_feature_names_api_calls)
    print(f' The total number of selected features is {len(selected_feature_names) - 2}.') # We deduct 2 because the features include sha256 and Malware columns
    print(f'\n Selected features: {selected_feature_names}.')

    # Create a new DataFrame with the selected features
    df_selected_train_features = train_dataset[selected_feature_names]
    df_selected_test_features = test_dataset[selected_feature_names]

    return df_selected_train_features, df_selected_test_features
def close_stdout():
    sys.stdout.close()

# Main Execution
timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")



redirect_stdout_to_file('results_' + timestamp + '.txt')


# Example usage of the function
# input_file_path = '/Users/khushbeen/PycharmProjects/StaticAndroidMalwareAnalysis/MachineLearningModels/FeatureSelection/Resources/qa_dataset.csv'
input_train_path = '../Resources/50_50_train_dataset.csv'
input_test_path = '../Resources/90_10_test_dataset.csv'
target_column = 'Malware'


selected_train_features_df, selected_test_features_df = feature_selection_and_dataframe(input_train_path,input_test_path ,target_column)

X_train, y_train, X_test, y_test, test_sha256 = prepare_data_for_classification(selected_train_features_df, selected_test_features_df)

build_and_evaluate_model(X_train, y_train, test_sha256)

print(f'DateTime: {timestamp}.')

close_stdout()






