from sklearn.datasets import load_breast_cancer
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import RFE
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score

# Load a sample dataset
data = load_breast_cancer()
X = data.data
y = data.target
feature_names = data.feature_names

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create a Random Forest Classifier
rf = RandomForestClassifier(random_state=42)

# Create RFE object
rfe = RFE(estimator=rf)

# Define a parameter grid to search for best parameters
param_grid = {
    'n_estimators': [50, 100, 200],  # Number of trees in random forest
    'estimator--max_depth': [None, 10, 20, 30],  # Maximum number of levels in tree
    'n_features_to_select': [5, 10, 15, 20]  # Number of features to select with RFE
}

# Create a GridSearchCV object
grid_search = GridSearchCV(estimator=rfe, param_grid=param_grid, cv=5, scoring='accuracy', verbose=1)

# Fit the grid search to the data
grid_search.fit(X_train, y_train)

# Best parameters and number of features
print("Best Parameters:", grid_search.best_params_)
best_n_features = grid_search.best_estimator_.n_features_
print("Best number of features:", best_n_features)

# Evaluate the best model
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Model Accuracy with Best Parameters:", accuracy)

# Get the names of the selected features
selected_features = best_model.support_
selected_feature_names = feature_names[selected_features]
print("Names of Selected Features:", selected_feature_names)
