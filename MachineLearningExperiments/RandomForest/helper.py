
import pandas as pd
import numpy as np

from sklearn.feature_selection import RFE




    
def remove_constant_features(df1, df2):
	#	 Identify constant categorical features
	constant_categorical_features1 = [col for col in df1.columns if df1[col].nunique() == 1 and df1[col].dtype == 'object']
	constant_categorical_features2 = [col for col in df2.columns if df2[col].nunique() == 1 and df2[col].dtype == 'object']
	if constant_categorical_features1 == constant_categorical_features2:
		
		print(f"There are {len(constant_categorical_features1)} constant categorical features and we remove them!")
		print(f"Removed features are: {constant_categorical_features1}.")

		# Drop constant categorical features from the DataFrame
		df1 = df1.drop(columns=constant_categorical_features1)
		# Drop constant categorical features from the DataFrame
		df2 = df2.drop(columns=constant_categorical_features2)
		
	return df1, df2



def feature_selection_and_dataframe(input_train_path, input_test_path, target_column, k_features=10):
    # Load your dataset
    train_dataset = pd.read_csv(input_train_path)
    test_dataset = pd.read_csv(input_test_path)

    # Drop the 'sha256' and target columns for feature selection
    df_train_features = train_dataset

    # Assume 'target' is the column you want to predict
    X_train = df_train_features.drop(columns=['sha256', target_column])
    y_train = df_train_features[target_column]
    
    
    X_train_APICalls = df_train_features.drop(df_train_features.iloc[:, 0:350], axis=1)
    print(f'Size of data frame that contains API Calls is {X_train_APICalls.shape}.')
    print(f'The original number of API Calls is {X_train_APICalls.shape[1]}.')
    
    
    X_train_manifest_properties = df_train_features.drop(df_train_features.iloc[:, 350:], axis=1)
    selected_feature_manifest = list(X_train_manifest_properties.columns.values)
    print(f'Number of manifest properties is {len(selected_feature_manifest)}.')
    
    


    # Perform feature selection using chi-squared test
    selector = SelectKBest(chi2, k=k_features)
    X_train_selected = selector.fit_transform(X_train_APICalls, y_train)
    print(f'Number of selected API Calls is {k_features}.')

    # Get the indices of the selected features
    selected_indices = selector.get_support(indices=True)

    # Get the names of the selected features
    selected_feature_names_api_calls = X_train_APICalls.columns[selected_indices]

    # 'sha256' and 'malware' columns are already included in the selected_feature_manifest
    selected_feature_names = list(selected_feature_manifest)+list(selected_feature_names_api_calls)
    print(f' The total number of selected features is {len(selected_feature_names) - 2}.') # We deduct 2 because the features include sha256 and Malware columns
    print(f'\n Selected features: {selected_feature_names}.')

    # Create a new DataFrame with the selected features
    df_selected_train_features = train_dataset[selected_feature_names]
    df_selected_test_features = test_dataset[selected_feature_names]

    return df_selected_train_features, df_selected_test_features
    
    
    
def build_and_evaluate_model_rfe():
	
	rf_model = RandomForestClassifier(random_state=42)
	rfe = RFE(estimator=rf_model)
	
	pipeline = Pipeline([('rfe', rfe), ('classifier', rf_model)])
	
	param_grid_rf = {
        'classifier__n_estimators': [50, 100, 200, 500, 1000],
        'classifier__max_depth': [None, 10, 16, 20, 30, 40],
        'classifier__min_samples_split': [2, 5, 10, 20, 50],
        'rfe__n_features_to_select': [100, 200, 300, 400, 500]  # Number of features to select with RFE
    }
	grid_search_rf = GridSearchCV(pipeline, param_grid_rf, cv=5, verbose=2, n_jobs=-1) 
	
	grid_search_rf.fit(X_train, y_train)
	best_n_features = grid_search_rf.best_estimator_.n_features_
	print("Best number of features:", best_n_features)
	print(f"The number of selected features is {best_n_features}.")
	best_model = grid_search_rf.best_estimator_
	selected_features = best_model.support_
	selected_feature_names = feature_names[selected_features]
	print("Names of Selected Features:", selected_feature_names)
	
	print("================RANDOM FOREST RESULTS===================:")
