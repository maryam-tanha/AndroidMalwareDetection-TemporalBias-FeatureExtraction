import json
import hashlib
import requests
from dotenv import load_dotenv
import os

load_dotenv()

API_KEY = os.getenv('VIRUSTOTAL_API_KEY')
FILE_PATHS = ["slack.apk"]  # Replace with your file paths


# Function to calculate file hashes
def calculate_hashes(file_path):
    with open(file_path, "rb") as file:
        data = file.read()
        md5_hash = hashlib.md5(data).hexdigest()
        sha1_hash = hashlib.sha1(data).hexdigest()
        sha256_hash = hashlib.sha256(data).hexdigest()
    return md5_hash, sha1_hash, sha256_hash


# Function to fetch VirusTotal report
def fetch_report(file_hash):
    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {"x-apikey": API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    return None


# Initialize an empty array for report objects
reports = []

# Iterate over the file paths
for file_path in FILE_PATHS:
    # Calculate file hashes
    md5, sha1, sha256 = calculate_hashes(file_path)

    # Fetch VirusTotal report
    report = fetch_report(md5)  # You can use any hash value (md5, sha1, or sha256)

    # Create the report object
    if report:
        report_object = {
            "md5": md5,
            "sha1": sha1,
            "sha256": sha256,
            "positives": report["data"]["attributes"]["last_analysis_stats"]["malicious"],
            "total": report["data"]["attributes"]["last_analysis_stats"]["total"],
            "scans": report["data"]["attributes"]["last_analysis_results"]
        }
        reports.append(report_object)

# Save the data to the "reports.vt" file
output_file = "../reports.vt"
with open(output_file, "w") as file:
    json.dump(reports, file)

print("Reports saved to:", output_file)
