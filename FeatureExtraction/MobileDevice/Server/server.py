import io
import os
import select
import socket
import time
import zipfile


def handle_client(client_socket):
    # Signal Client Ready
    client_socket.send("START\n".encode())

    # Receive APK name and create feature folder
    apkName = client_socket.recv(1024).decode()
    print(f"[+] Saving {apkName} Feature Folder...")
    if not os.path.exists(f'Features/{apkName}'):
        os.makedirs(f'Features/{apkName}')

    # Signal Client BEGIN_TRANSFER
    client_socket.send('BEGIN_TRANSFER\n'.encode())

    # Receive zip file size
    size_data = client_socket.recv(8)
    zip_size = int.from_bytes(size_data, byteorder='big', signed=False)

    # Signal Client to SEND_CONTENTS
    client_socket.send("SEND_ZIP\n".encode())

    zipped_dir = io.BytesIO()
    bytes_received = 0
    receive_zip(bytes_received, client_socket, zip_size, zipped_dir)

    # print('Now extracting folder')
    zipped_dir.seek(0)
    with zipfile.ZipFile(zipped_dir, 'r') as zip_ref:
        zip_ref.extractall(f'Features/{apkName}')

    print(f"[+] Saved folder to 'Features'/{apkName}")
    time.sleep(5)
    client_socket.send('TRANSFER_COMPLETE\n'.encode())


def receive_zip(bytes_received, client_socket, zip_size, zipped_dir):
    while bytes_received < zip_size:
        data = client_socket.recv(min(4096, zip_size - bytes_received))
        if not data:
            break
        zipped_dir.write(data)
        bytes_received += len(data)


if __name__ == '__main__':

    IP = ''
    PORT = 8005
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((IP, PORT))
    server_socket.listen(1)

    print(f'[+] Server Started Listening on {IP}:{PORT}')

    sockets = [server_socket]

    try:
        while True:

            read_sockets, _, _ = select.select(sockets, [], [])

            for sock in read_sockets:

                if sock == server_socket:
                    connection, client_address = server_socket.accept()
                    sockets.append(connection)
                    print(f'[+] Client Connected {client_address}')

                else:
                    data = sock.recv(1024).decode()

                    if data == 'TRANSFER':
                        handle_client(sock)

                    else:
                        print(f'[-] Client Disconnected, removing {sock.getpeername()}')
                        sock.close()
                        sockets.remove(sock)

    except KeyboardInterrupt:
        print(f'[-] Caught keyboard interrupt, closing.')

    finally:
        for socket in sockets:
            socket.close()
