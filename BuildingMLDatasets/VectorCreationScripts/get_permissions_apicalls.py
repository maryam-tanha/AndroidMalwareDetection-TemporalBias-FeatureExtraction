import csv
import os
import pandas as pd
import re
import chardet
import sys


def gen_csv_header_row(txt_files, resource_dir):
    headers = ['sha256', 'Malware']
    
    for txt_file in txt_files:
        with open(resource_dir + txt_file, 'r') as file:
            headers.extend(file.read().splitlines())
    return headers


def create_hashset_from_file(txt_file):
    hashset = set()
    with open(txt_file, 'rb') as file:
        result = chardet.detect(file.read())
        encoding = result['encoding']

    with open(txt_file, 'r', encoding=encoding) as file:
        for line in file:
            hashset.add(line.strip())
    return hashset


def create_hashset_from_file(txt_file):
    hashset = set()
    with open(txt_file, 'r') as file:
        for line in file:
            hashset.add(line.strip())
    return hashset


def create_feature_hashes(parent, apk_folders):
    all_apks_features = []
    for apk_folder in apk_folders:
        feature_files_dir = parent + "/" + apk_folder
        apk_features_array = [apk_folder]
        features_files = os.listdir(feature_files_dir)
        if len(features_files) >= 4:
            try:
                for feature_file in features_files:
                    if feature_file.endswith(('permissions.txt', 'api-calls.txt')):
                        apk_features_array.append(
                            create_hashset_from_file(os.path.join(feature_files_dir, feature_file)))
                all_apks_features.append(apk_features_array)
            except Exception as e:
                print(f"An error occurred for {apk_folder}: {e}")
    print("Features hashes have been completed")
    return all_apks_features


def create_rows(main_df, all_apks_features_hashes):
    idx = 0
    for apk in all_apks_features_hashes:
        idx += 1
        apk_row = [apk[0], 0]  # 1 for malware. change it to 0 for benign
        api_call_hashes = apk[1]
        
        permission_hashes = apk[2]

        # order inside apk: 1 -> api calls, 2 -> hw-sw, 3 -> intent action, 4 -> permissions

        for permission in main_df.columns[2:60]:
            if permission in permission_hashes:
                apk_row.append(1)
            else:
                apk_row.append(0)

        

        for api_call in main_df.columns[60:157]:
            if api_call in api_call_hashes:
                apk_row.append(1)
            else:
                apk_row.append(0)
        #print("APKs Processed: " + str(idx))
        main_df.loc[len(main_df)] = apk_row


def main():
    # Creating header row for the csv file
    #headers_files = ['dangerous-sigpid-permissions.txt', 'Mobitive-hwsw-list.txt', 'Mobitive-intent-actions.txt',
                     #'Mobitive-API-Calls.txt']
    headers_files = ['dangerous-sigpid-permissions.txt', 'xmal-API-Calls.txt']
    
    
    
    txtfiles_path = os.path.join(os.getcwd(),'resources/')
    print(txtfiles_path)
	
    feature_column_names = gen_csv_header_row(headers_files, txtfiles_path)
    
    # Header length = 2 + 58 + 76 + 214 + 2290
    main_df = pd.DataFrame(columns=feature_column_names)

    # Navigating to the directory with feature files and folders
    # This will be replaced with path to the hard drive with all the apk features
    #folder_path = "E:/AllBenignExtractedFeatures/"
    folder_path = "/home/mary/Desktop/StaticAnalysis/ExtractedFeatures/benign_in_use"
    #folder_path = "/home/mary/Desktop/StaticAnalysis/ExtractedFeatures/malware_in_use"

    os.chdir(folder_path)
    
    
    if os.path.exists(folder_path) and os.path.isdir(folder_path): os.chdir(folder_path)
    else:print("Folder does not exist or is not a directory")

    
    parent_dir = os.getcwd()

    # Adding rows to the df
    apk_feature_folders = os.listdir()
    all_apks_features_hashes = create_feature_hashes(parent_dir, apk_feature_folders)
    print(len(all_apks_features_hashes))
    import sys
    sys.exit(0)
    create_rows(main_df, all_apks_features_hashes)

    # Creating output csv file
    current_file = os.path.abspath(__file__)
    current_directory = os.path.dirname(current_file)
    os.chdir(current_directory+ '/outputs')
    main_df.to_csv("benign_pi_all_feature_vectors.csv", index=False)


if __name__ == "__main__":
    main()
