import csv
import os
import pandas as pd


def gen_csv_header_row(txt_files, resource_dir):
    headers = ['sha256', 'Malware']
    
    for txt_file in txt_files:
        with open(resource_dir + txt_file, 'r') as file:
            headers.extend(file.read().splitlines())
    return headers


def create_hashset_from_file(txt_file):
    hashset = set()
    with open(txt_file, 'r') as file:
        for line in file:
            stripped_line = line.strip()
            last_part = stripped_line.rsplit('.', 1)[-1]
            hashset.add(last_part)
    return hashset


def create_feature_hashes(parent, apk_folders):
    all_apks_features = []
    for apk_folder in apk_folders:
        feature_files_dir = parent + "/" + apk_folder
        apk_features_array = [apk_folder]
        features_files = os.listdir(feature_files_dir)
        if len(features_files) >= 4:
            for feature_file in features_files:
                if feature_file.endswith(('permissions.txt', 'intent-actions.txt')):
                    apk_features_array.append(create_hashset_from_file(feature_files_dir + "/" + feature_file))
            all_apks_features.append(apk_features_array)
    return all_apks_features


def create_rows(main_df, all_apks_features_hashes):
    # main_df header info:
    # sha_256, apk_name, permissions(3 - 149), intent actions (150 - 275), api calls (276 - 381)

    for apk in all_apks_features_hashes:
        apk_row = [apk[0], 0]
        # api_call_hashes = apk[1]
        intent_action_hashes = apk[1]
        permission_hashes = apk[2]

        for permission in main_df.columns[2:149]:
            if permission in permission_hashes:
                apk_row.append(1)
            else:
                apk_row.append(0)

        for intent_action in main_df.columns[149:275]:
            if intent_action in intent_action_hashes:
                apk_row.append(1)
            else:
                apk_row.append(0)
        main_df.loc[len(main_df)] = apk_row


def main():
    # Creating headers for the csv file
    headers_files = ['BL-AMD-permissions.txt', 'BL-AMD-intent-actions.txt']
    current_directory = os.getcwd()
    parent_directory = os.path.dirname(current_directory)
    os.chdir(parent_directory)
    txtfiles_path = os.path.join(os.getcwd(),'resources/')
    print(txtfiles_path)
	
    feature_column_names = gen_csv_header_row(headers_files, txtfiles_path)
    main_df = pd.DataFrame(columns=feature_column_names)

    # Navigating to the directory with feature files and folders
    
    folder_path = os.path.join(os.getcwd(),'resources/android_features')
    print(folder_path)
    
    if os.path.exists(folder_path) and os.path.isdir(folder_path): os.chdir(folder_path)
    else:print("Folder does not exist or is not a directory")

    
    parent_dir = os.getcwd()

    # Adding rows to the df
    apk_feature_folders = os.listdir()
    all_apks_features_hashes = create_feature_hashes(parent_dir, apk_feature_folders)
    if all_apks_features_hashes is not None:
        create_rows(main_df, all_apks_features_hashes)

    # Creating output csv file
    current_file = os.path.abspath(__file__)
    current_directory = os.path.dirname(current_file)
    
    os.chdir(current_directory+ '/outputs')
    main_df.to_csv("broadlearning_manifest_features_vectors.csv", index=False)


if __name__ == "__main__":
    main()
