import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from torch.utils.data import DataLoader, TensorDataset
from sklearn.model_selection import train_test_split
import pandas as pd
import sys

# Check if GPU is available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Redirect stdout to a file
sys.stdout = open('results.txt', 'w')

# Load the combined dataset
dataset_path = '../Resources/qa_dataset.csv'
df = pd.read_csv(dataset_path)

# Assuming your target variable is named 'label' and other columns are features
X = df.drop(columns=['sha256', 'Malware']).values
y = df['Malware'].values

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, stratify=y, random_state=42)

# Convert data to PyTorch tensors for classification and move to GPU
X_train_tensor = torch.tensor(X_train, dtype=torch.float32).to(device)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32).to(device)

X_test_tensor = torch.tensor(X_test, dtype=torch.float32).to(device)
y_test_tensor = torch.tensor(y_test, dtype=torch.float32).to(device)

# Modify the target tensor size to match the model output size
y_train_tensor = y_train_tensor.view(-1, 1)
y_test_tensor = y_test_tensor.view(-1, 1)

# Define the Liquid Neural Network (LNN) model for binary classification and move to GPU
class LNN(nn.Module):
    def __init__(self, input_size, reservoir_size, dtype=torch.float32):
        super(LNN, self).__init__()
        self.reservoir_size = reservoir_size
        self.W_in = nn.Linear(input_size, reservoir_size).to(device)
        self.W_res = nn.Linear(reservoir_size, reservoir_size).to(device)
        self.W_out = nn.Linear(reservoir_size, 1).to(device)

    def forward(self, input):
        reservoir = torch.zeros((input.size(0), self.reservoir_size), dtype=input.dtype).to(device)

        # Apply the linear layer to the entire input tensor
        input_transformed = self.W_in(input)

        # Iterate over time (features) and update the reservoir
        for i in range(input.size(1)):
            # Ensure that the index i does not go beyond the reservoir size
            if i < self.reservoir_size:
                reservoir = torch.tanh(input_transformed[:, i, None] + self.W_res(reservoir))

        # Apply the output layer
        output = torch.sigmoid(self.W_out(reservoir))
        return output

# Initialize the LNN model and move to GPU
input_size = X_train.shape[1]
reservoir_size = 100
model = LNN(input_size, reservoir_size).to(device)

# Define loss function and optimizer for binary classification
criterion = nn.BCELoss()  # Binary Cross-Entropy Loss
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Convert data to DataLoader for batch training
train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)

# Training loop
num_epochs = 100
for epoch in range(num_epochs):
    for inputs, labels in train_loader:
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

    print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {loss.item()}')

# Evaluation on the test set
model.eval()
with torch.no_grad():
    test_outputs = model(X_test_tensor)
    test_loss = criterion(test_outputs, y_test_tensor)
    print(f'Test Loss: {test_loss.item()}')

    # Convert predictions to binary (0 or 1) based on a threshold (e.g., 0.5 for binary classification)
    predictions = (test_outputs >= 0.5).float()

    # Convert PyTorch tensors to numpy arrays for sklearn metrics
    y_true = y_test_tensor.cpu().numpy()
    y_pred = predictions.cpu().numpy()

    # Calculate evaluation metrics
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred, zero_division=1.0)
    recall = recall_score(y_true, y_pred)
    f1 = f1_score(y_true, y_pred)
    auc_roc = roc_auc_score(y_true, test_outputs.cpu().numpy())

    # Print the evaluation metrics to the file
    print(f'Accuracy: {accuracy:.4f}')
    print(f'Precision: {precision:.4f}')
    print(f'Recall: {recall:.4f}')
    print(f'F1 Score: {f1:.4f}')
    print(f'AUC-ROC: {auc_roc:.4f}')

# Close the file to save the results
sys.stdout.close()
