import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv('apk_dataset.csv',
                   names=['APK Name', 'SHA Key', 'Timestamp', 'Malware Label', 'Frequency of System Calls',
                          'Count of DNS requests', 'Count of outbound connections', 'Domains/IPs contacted',
                          'Data volume sent', 'Data volume received', 'Number of files created', 'Number of files read',
                          'Number of files deleted', 'Process spawning', 'Loaded DLLs', 'Intents sent',
                          'Intents received', 'Checks for root privileges', 'Camera access frequency',
                          'Microphone access frequency', 'GPS query frequency', 'Frequency of cryptographic API calls',
                          'Autostart entries created', 'CPU usage patterns', 'Memory usage patterns'])
df = pd.DataFrame(data)

# Set display options
pd.set_option('display.max_rows', None)  # or a large number like 5000
pd.set_option('display.max_columns', None)  # or a large number like 50
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', None)  # For wider columns

# Dropping non-numeric columns
df = df.sort_values(by='Timestamp')

df = df.drop(['APK Name', 'SHA Key', 'Timestamp'], axis=1)
df = df.drop(df.index[-1])

object_cols = ['Frequency of System Calls', 'Count of DNS requests', 'Count of outbound connections', 'Domains/IPs contacted', 'Data volume sent', 'Data volume received', 'Number of files created', 'Number of files read', 'Number of files deleted', 'Process spawning', 'Loaded DLLs', 'Intents sent', 'Intents received', 'Checks for root privileges', 'Camera access frequency', 'Microphone access frequency', 'GPS query frequency', 'Frequency of cryptographic API calls', 'Autostart entries created', 'CPU usage patterns', 'Memory usage patterns']

for col in object_cols:
    df[col] = df[col].astype(float)
df = df.fillna(df.mean())

# Split data into features and target
X = df.drop(columns=['Malware Label'])  # Dropping the target and the timestamp columns
y = df['Malware Label'].astype(int)


# Splitting data into training and testing sets
train_size = int(0.9 * len(data))
X_train, X_test = X[:train_size], X[train_size:]
y_train, y_test = y[:train_size], y[train_size:]

# Parameter Grid for Random Forest
param_grid_rf = {
    'n_estimators': [50, 100, 200, 500],
    'max_depth': [None, 10, 16, 20, 30],
    'min_samples_split': [2, 5, 10, 20]
}

# Define the parameter grid for XGBoost
param_grid_xgb = {
    'n_estimators': [50, 100, 200, 500],
    'max_depth': [3, 6, 9, 12],
    'learning_rate': [0.001, 0.01, 0.1, 0.3],
    'subsample': [0.5, 0.8, 1.0],
    'colsample_bytree': [0.5, 0.8, 1.0]
}

rf_model = RandomForestClassifier()
xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')  # Avoiding a warning related to the label
# encoder


grid_search_rf = GridSearchCV(rf_model, param_grid_rf, cv=5, verbose=2, n_jobs=-1)
grid_search_xgb = GridSearchCV(xgb_model, param_grid_xgb, cv=5, verbose=2, n_jobs=-1)

# Fit the models
grid_search_rf.fit(X_train, y_train)
grid_search_xgb.fit(X_train, y_train)

# Predict and evaluate using the best model
best_rf = grid_search_rf.best_estimator_
best_xgb = grid_search_xgb.best_estimator_

print("================RANDOM FOREST RESULTS===================:")
y_pred = best_rf.predict(X_test)
print("Best Parameters: ", grid_search_rf.best_params_)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Predict and evaluate using the best model

print("================XGB BOOST RESULTS===================:")
y_pred = best_xgb.predict(X_test)
print("Best Parameters: ", grid_search_xgb.best_params_)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
