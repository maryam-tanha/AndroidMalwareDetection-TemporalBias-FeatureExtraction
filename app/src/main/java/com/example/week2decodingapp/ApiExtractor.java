package com.example.week2decodingapp;

import com.google.common.collect.Sets;

import org.jf.dexlib2.DexFileFactory;
import org.jf.dexlib2.Opcodes;
import org.jf.dexlib2.ReferenceType;
import org.jf.dexlib2.iface.ClassDef;
import org.jf.dexlib2.iface.DexFile;
import org.jf.dexlib2.iface.Method;
import org.jf.dexlib2.iface.MethodImplementation;
import org.jf.dexlib2.iface.instruction.Instruction;
import org.jf.dexlib2.iface.instruction.ReferenceInstruction;
import org.jf.dexlib2.iface.reference.MethodReference;
import org.jf.dexlib2.util.ReferenceUtil;

import java.io.IOException;
import java.util.Set;

public class ApiExtractor {

    public static void extractApiCalls(String path) throws IOException {

        DexFile dexFile = DexFileFactory.loadDexFile(path, Opcodes.forApi(15));
        Set<MethodReference> calledMethods = Sets.newHashSet();

        for (ClassDef classDef: dexFile.getClasses()) {
            for (Method method: classDef.getMethods()) {
                MethodImplementation implementation = method.getImplementation();
                if (implementation != null) {
                    for (Instruction instruction: implementation.getInstructions()) {
                        if (instruction.getOpcode().referenceType == ReferenceType.METHOD) {
                            calledMethods.add((MethodReference)((ReferenceInstruction)instruction).getReference());
                        }
                    }
                }
            }
        }


        for (MethodReference methodReference: calledMethods) {
            System.out.println(ReferenceUtil.getReferenceString(methodReference));
        }
    }
}