package com.example.week2decodingapp;

import static android.os.Environment.getExternalStorageDirectory;

import org.jf.dexlib2.DexFileFactory;
import org.jf.dexlib2.Opcodes;
import org.jf.dexlib2.dexbacked.DexBackedClassDef;
import org.jf.dexlib2.dexbacked.ZipDexContainer;
import org.jf.dexlib2.dexbacked.reference.DexBackedMethodReference;
import org.jf.dexlib2.iface.MultiDexContainer;

import org.jf.dexlib2.dexbacked.DexBackedDexFile;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.google.common.collect.ImmutableSet;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import fr.xgouchet.axml.CompressedXmlParser;


public class MainActivity extends AppCompatActivity {

    private static final int REQUEST_CODE = 1;
    private static final String FILENAME = "InstalledAPKList.txt";
    private static final String FILEPATH = "SampleOutputs";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        long startTime = System.nanoTime();

        //Checks for permission to read and write external storage.
        checkPermissions();

        //Creating a folder in external directory to save outputs.
        String createFolder = getExternalStorageDirectory() + "/" + FILEPATH;
        new File(createFolder);

        try {
            // Stores package names inside a .txt file for later use//
             storeAPKList();

            String packageName = "com.whatsapp"; //installed package name; Will be extracted from previous function in future.
            String APKName = extractAPKName(packageName);
            String xmlFileName = APKName + "AndroidManifest.xml";

            extractManifestFromAPK(packageName, xmlFileName);
            StringBuilder content = readManifest(xmlFileName);
            String manifestFileName = createManifestFile(content, APKName);

            extractDataFromManifest(manifestFileName, APKName);

            extractAPICalls(packageName, APKName);
        } catch (IOException | PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }

        long endTime = System.nanoTime();
        double elapsedTimeInNanoseconds = endTime - startTime;
        double elapsedTimeInSeconds = elapsedTimeInNanoseconds / 1_000_000_000.0;
        System.out.println("Total Time Taken: " + elapsedTimeInSeconds + " seconds");
    }


    public static String extractAPKName(String input) {
        input = input.substring(4);
        StringBuilder sb = new StringBuilder();
        for (String s : input.split("\\.")) {
            sb.append(s.substring(0, 1).toUpperCase());
            sb.append(s.substring(1).toLowerCase());
        }
        return sb.toString();
    }


    public void checkPermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_CODE);
        } else {
            // Permission has already been granted, you can read from external storage
            System.out.println("Permission Granted Already");
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
                // Permission granted
                System.out.println("Permissions Granted after asking.");
            } else {
                // Permission denied
                System.out.println("Permissions Denied after asking.");
            }
        }
    }

    /**
     * Checks for permissions to read and write external storage.
     *
     * @return boolean
     */
    private boolean isExternalStorageAvailableForRW() {
        String extStorageState = Environment.getExternalStorageState();
        return extStorageState.equals(Environment.MEDIA_MOUNTED);
    }

    /**
     * Detects all the installed APKs on the android device(or emulator) using packageManager,
     * Creates a text file with all the package names and stores them into external storage.
     *
     * @throws IOException when the file or folder is not found
     */
    private void storeAPKList() throws IOException {
        PackageManager packageManager = getPackageManager();
        @SuppressLint("QueryPermissionsNeeded") List<ApplicationInfo> packageNames = packageManager.getInstalledApplications(0);

        if (!isExternalStorageAvailableForRW()) {
            System.out.println("External Storage not available for RW");
        } else {
            File myExternalFile = new File(getExternalFilesDir(FILEPATH), FILENAME);

            FileOutputStream fos;
            fos = new FileOutputStream(myExternalFile);
            for (ApplicationInfo packageInfo : packageNames) {
                // Write the package name to the file
                fos.write((packageInfo.packageName + "\n").getBytes(StandardCharsets.UTF_8));
            }
            Toast.makeText(MainActivity.this, "Installed APK List stored to external storage.", Toast.LENGTH_SHORT).show();
            fos.close();
        }
    }


    //    private void readAPKFromStorage() throws IOException {
//        FileReader fr = null;
//        File myExternalFile = new File(getExternalFilesDir(FILEPATH), FILENAME);
//        StringBuilder stringBuilder = new StringBuilder();
//        BufferedReader br = null;
//        try {
//            fr = new FileReader(myExternalFile);
//            br = new BufferedReader(fr);
//            String line = br.readLine();
//            while (line != null) {
//                stringBuilder.append(line).append("\n");
//                line = br.readLine();
//            }
//
//        } catch (IOException e) {
//            assert fr != null;
//            fr.close();
//            br.close();
//            e.printStackTrace();
//        } finally {
//            String fileContents = "File Contents\n" + stringBuilder;
//            System.out.println(fileContents);
//        }
//    }

    /**
     * Extracts the APK file, then copies the content of AndroidManifest.xml to a file in cache directory.
     *
     * @param packageName String;
     * @param xmlFileName String;
     * @throws PackageManager.NameNotFoundException if package name not found;
     * @throws FileNotFoundException                if apk file path not found;
     */
    private void extractManifestFromAPK(String packageName, String xmlFileName) throws PackageManager.NameNotFoundException, FileNotFoundException {

        String apkFilePath = getPackageManager().getApplicationInfo(packageName, 0).sourceDir;

        ZipInputStream zipIs = new ZipInputStream(new FileInputStream(apkFilePath));
        ZipEntry ze;
        try {
            while ((ze = zipIs.getNextEntry()) != null) {
                if (ze.getName().equals("AndroidManifest.xml")) {
                    FileOutputStream fout = new FileOutputStream(getCacheDir().getAbsolutePath() + "/" + xmlFileName);
                    byte[] buffer = new byte[1024];
                    int length;
                    while ((length = zipIs.read(buffer)) > 0) {
                        fout.write(buffer, 0, length);
                    }
                    zipIs.closeEntry();
                    fout.close();
                }
            }
            zipIs.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Reads and converts the Binary XML(AXML) file into human readable XML file.
     *
     * @return String output
     * @throws IOException when file not found
     */
    private StringBuilder readManifest(String manifestFileName) throws IOException {
        try (FileInputStream is = new FileInputStream(new File(getCacheDir(), manifestFileName))) {
            Document doc = new CompressedXmlParser().parseDOM(is);
            StringBuilder content = new StringBuilder();
            dumpNode(doc.getChildNodes().item(0), "", content);
            return content;
        } catch (Exception e) {
            System.err.println("Failed AXML decode: " + e);
            e.printStackTrace();
        }
        return null;
    }

    private String createManifestFile(StringBuilder content, String apkName) throws IOException {
        String filename = apkName + "Manifest.txt";
        File myExternalFile = new File(getExternalFilesDir(FILEPATH), filename);
        FileOutputStream fos;
        fos = new FileOutputStream(myExternalFile);
        fos.write((String.valueOf(content)).getBytes(StandardCharsets.UTF_8));
        Toast.makeText(MainActivity.this, "Manifest File stored to external storage.", Toast.LENGTH_SHORT).show();
        fos.close();
        return filename;
    }

    public static String getStringBetweenBrackets(String input) {
        int startIndex = input.indexOf("[") + 1;
        int endIndex = input.indexOf("]");
        if (startIndex - 1 == -1 || endIndex == -1) {
            return null;
        }
        return input.substring(startIndex, endIndex);
    }

    private void extractDataFromManifest(String manifestFileName, String apkName) throws IOException {
        File manifestFile = new File(getExternalFilesDir(FILEPATH), manifestFileName);
        BufferedReader reader = new BufferedReader(new FileReader(manifestFile));

        List<String> hardwareSoftwareList = new ArrayList<>();
        List<String> permissionList = new ArrayList<>();

        // creating HashSet for storing intents
        HashSet<String> intentSet = new HashSet<>();

        String line;
        while ((line = reader.readLine()) != null) {
            if (line.contains("uses-feature")) {
                String output = getStringBetweenBrackets(line);
                hardwareSoftwareList.add(output);
            } else if (line.contains("action [")) {
                String output = getStringBetweenBrackets(line);
                intentSet.add(output);
            } else if (line.contains("uses-permission")) {
                String output = getStringBetweenBrackets(line);
                permissionList.add(output);
            }
        }
        reader.close();

        String hwFileName = apkName + "-hw-sw.txt";
        writeOutputFile(hardwareSoftwareList, hwFileName);

        String intentFileName = apkName + "-intent-actions.txt";
        writeOutputFile(intentSet, intentFileName);

        String permissionFileName = apkName + "-permissions.txt";
        writeOutputFile(permissionList, permissionFileName);
    }

    /**
     * Writes a text file to external storage from a collection data structure.
     *
     * @param content  Collection; iterable to iterate over and write content ot output file
     * @param fileName String; output file name
     */
    private void writeOutputFile(Collection<String> content, String fileName) {
        try {
            File myFile = new File(getExternalFilesDir(FILEPATH), fileName);
            FileOutputStream fos;
            fos = new FileOutputStream(myFile);
            for (String line : content) {
                fos.write((line + "\n").getBytes(StandardCharsets.UTF_8));
            }
            fos.close();
            System.out.println("SUCCESS: Output File: " + fileName + " created and filled.");
        } catch (IOException e) {
            System.out.println("An error occurred while writing content to external storage.");
            e.printStackTrace();
        }
    }

    /**
     * Code Help taken from https://github.com/xgouchet/AXML/blob/master/demo/src/DumpApkXml.java
     */
    private void dumpNode(Node node, String indent, StringBuilder content) {
        String line = (indent + node.getNodeName() + " " + attrsToString(node.getAttributes()));
        content.append(line).append("\n");
        NodeList children = node.getChildNodes();
        for (int i = 0, n = children.getLength(); i < n; ++i)
            dumpNode(children.item(i), indent + "   ", content);
    }

    private static String attrsToString(NamedNodeMap attrs) {
        StringBuilder sb = new StringBuilder();
        sb.append('[');
        if (attrs.getLength() > 0) {
            Node attr = attrs.item(0);
            sb.append(attr.getNodeValue());
        }
        sb.append(']');
        return sb.toString();
    }

    /**
     * Extracts the API calls out dex file
     *
     * @throws IOException when APK file path not found
     */
    private void extractAPICalls(String packageName, String apkName) throws IOException {
        try {
            String apkFilePath = getPackageManager().getApplicationInfo(packageName, 0).sourceDir;
            extractAPICallHelper(apkFilePath, apkName);
        } catch (PackageManager.NameNotFoundException e) {
            System.out.println("ERROR: There was a problem with extracting the API calls out of Classes.dex files.");
            e.printStackTrace();
        }
    }

    /**
     * Extracting API Calls out of Dex Files and storing them in text file.
     * @param apkFilePath String;
     * @param apkName String;
     * @throws IOException when file not found;
     */
    public void extractAPICallHelper(String apkFilePath, String apkName) throws IOException {
        List<DexBackedDexFile> dexFiles = new ArrayList<>();
        List<String> dexFileNames = extractAllDexFileNames(apkFilePath);

        Set<String> androidApiPackages = ImmutableSet.of(
                "Landroid/",
                "Lcom/android/internal/util",
                "Ldalvik/",
                "Ljava/",
                "Ljavax/",
                "Lorg/apache/",
                "Lorg/json/",
                "Lorg/w3c/dom/",
                "Lorg/xml/sax",
                "Lorg/xmlpull/v1/",
                "Ljunit/"
        );
        Set<String> androidApiPrefixes = new HashSet<>(androidApiPackages);

        HashSet<String> api_calls = new HashSet<>();

        if (dexFileNames != null) {
            for (String dexFileName: dexFileNames) {
                MultiDexContainer.DexEntry<? extends DexBackedDexFile> dexEntry = loadDexFile(dexFileName, apkFilePath);
                DexBackedDexFile dexFile = dexEntry.getDexFile();
                dexFiles.add(dexFile);
            }
        } else {
            System.out.println("ERROR: No files with .dex suffix found in the APK provided.");
            return;
        }

        //Implement a hashset that records all the class names in the dexFile

        Set<String> definedClasses = new HashSet<>();

//        int counter = 0; //Used for debugging purposes.
        for (DexBackedDexFile dexFile: dexFiles) {

            Set<? extends DexBackedClassDef> classes = dexFile.getClasses();
            for (Object item : classes) {
                definedClasses.add(item.toString());
            }

            DexBackedDexFile.IndexedSection<DexBackedMethodReference> methods = dexFile.getMethodSection();

            for (DexBackedMethodReference method : methods) {
                String className = method.getDefiningClass();
                if (!definedClasses.contains(className)) {
                    for (String apiCandidatePrefix : androidApiPrefixes) {
                        if (className.startsWith(apiCandidatePrefix)) {
//                            counter++; //DEBUG
                            api_calls.add(className + "->" + method.getName());
                            break;
                        }
                    }
                }
            }
        }

        //Debugging Lines
//        api_calls.forEach(System.out::println);
//        System.out.println("Counter: " + counter);
//        System.out.println("Set Length: " + api_calls.size());

        String apiCallFilename = apkName + "-api-calls.txt";
        writeOutputFile(api_calls, apiCallFilename);
    }

    /**
     * Extracting names of dex files from APK Archive.
     * @param apkFilePath String
     * @return ArrayList
     */
    public static ArrayList<String> extractAllDexFileNames(String apkFilePath) {

        try {
            // Extract the names of dex file from APK
            ZipDexContainer multiDexContainer = (ZipDexContainer) DexFileFactory.loadDexContainer(new File(apkFilePath), Opcodes.forApi(16));
            return new ArrayList<>(multiDexContainer.getDexEntryNames());

        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * Loading the dex file by providing the name of dex file.
     * @param dexFileName String; Name of dex file, for example: Classes.dex, Classes2.dex, etc.
     * @param apkFilePath String; APK FIle Path
     * @return MultiDexContainer File
     * @throws IOException when filename not found
     */
    private static MultiDexContainer.DexEntry<? extends DexBackedDexFile> loadDexFile(String dexFileName, String apkFilePath) throws IOException {
        return DexFileFactory.loadDexEntry(new File(apkFilePath), dexFileName, true, Opcodes.forApi(16));
    }

}


