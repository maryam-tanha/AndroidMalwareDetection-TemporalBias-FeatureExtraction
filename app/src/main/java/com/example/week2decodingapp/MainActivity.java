package com.example.week2decodingapp;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import fr.xgouchet.axml.CompressedXmlParser;

public class MainActivity extends AppCompatActivity {

    private static final int REQUEST_CODE = 1;
    private static final String FILENAME = "InstalledAPkList.txt";
    private static final String FILEPATH = "MyFileDir";
//    private static final String MANIFEST_FILENAME = "AppAndroidManifest.txt";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //Checks for permission to read and write external storage.
        checkPermissions();

        try {
            storeAPKList();
            readAPKFromStorage();
            extractManifestFromAPK();
            readManifest();
            extractAPICalls();
        } catch (PackageManager.NameNotFoundException | IOException e) {
            e.printStackTrace();
        }
    }

    public void checkPermissions() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_CODE);
        } else {
            // Permission has already been granted, you can read from external storage
            System.out.println("Permission Granted Already");
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED && grantResults[1] == PackageManager.PERMISSION_GRANTED) {
                // Permission granted
                System.out.println("Permissions Granted after asking.");
            } else {
                // Permission denied
                System.out.println("Permissions Denied after asking.");
            }
        }
    }

    /**
     * Checks for permissions to read and write external storage.
     * @return boolean
     */
    private boolean isExternalStorageAvailableForRW() {
        String extStorageState = Environment.getExternalStorageState();
        return extStorageState.equals(Environment.MEDIA_MOUNTED);
    }

    /**
     * Detects all the installed APKs on the android device(or emulator) using packageManager,
     * Creates a text file with all the package names and stores them into external storage.
     * @throws IOException when the file or folder is not found
     */
    private void storeAPKList() throws IOException {
        PackageManager packageManager = getPackageManager();
        @SuppressLint("QueryPermissionsNeeded") List<ApplicationInfo> packageNames = packageManager.getInstalledApplications(0);

        if (!isExternalStorageAvailableForRW()) {
            System.out.println("External Storage not available for RW");
        } else {
            File myExternalFile = new File(getExternalFilesDir(FILEPATH), FILENAME);
            FileOutputStream fos;
            fos = new FileOutputStream(myExternalFile);
            for (ApplicationInfo packageInfo : packageNames) {
                // Write the package name to the file
                fos.write((packageInfo.packageName + "\n").getBytes(StandardCharsets.UTF_8));
            }
            Toast.makeText(MainActivity.this, "Installed APK List stored to external storage.", Toast.LENGTH_SHORT).show();
            fos.close();
        }

    }


    /**
     * Reads the list of APKs(package names) from external storage and prints the content to the console.
     * @throws IOException if file or folder not found
     */
    private void readAPKFromStorage() throws IOException {
        FileReader fr = null;
        File myExternalFile = new File(getExternalFilesDir(FILEPATH), FILENAME);
        StringBuilder stringBuilder = new StringBuilder();
        BufferedReader br = null;
        try {
            fr = new FileReader(myExternalFile);
            br = new BufferedReader(fr);
            String line = br.readLine();
            while (line != null) {
                stringBuilder.append(line).append("\n");
                line = br.readLine();
            }

        } catch (IOException e) {
            assert fr != null;
            fr.close();
            br.close();
            e.printStackTrace();
        } finally {
            String fileContents = "File Contents\n" + stringBuilder;
            System.out.println(fileContents);
        }
    }


    /**
     * Extracts the APK file, then copies the content of AndroidManifest.xml to cache directory.
     */
    private void extractManifestFromAPK() throws PackageManager.NameNotFoundException, FileNotFoundException {
        // The package name is made available from readAPKFromStorage() function.
        // Hardcoding the package name for testing.
        String packageName = "com.google.android.calendar";
        String apkFilePath = getPackageManager().getApplicationInfo(packageName, 0).sourceDir;

        ZipInputStream zipIs =  new ZipInputStream(new FileInputStream(apkFilePath));
        ZipEntry ze;
        try {
            while ((ze = zipIs.getNextEntry()) != null) {
                if (ze.getName().equals("AndroidManifest.xml")) {
                    FileOutputStream fout = new FileOutputStream(getCacheDir().getAbsolutePath() + "/SlackAndroidManifest.xml");
                    byte[] buffer = new byte[1024];
                    int length;
                    while ((length = zipIs.read(buffer))>0) {
                        fout.write(buffer, 0, length);
                    }
                    zipIs.closeEntry();
                    fout.close();
                }
            }
            zipIs .close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Reads and converts the Binary XML(AXML) file into human readable XML file.
     * @throws IOException when file not found
     */
    private void readManifest() throws IOException {
        try (FileInputStream is = new FileInputStream(new File(getCacheDir(), "SlackAndroidManifest.xml"))) {
            System.out.println("Print Manifest Content");
            Document doc = new CompressedXmlParser().parseDOM(is);
//            File myExternalFile = new File(getExternalFilesDir(FILEPATH), MANIFEST_FILENAME);
//            FileOutputStream fos = null;
//            fos = new FileOutputStream(myExternalFile);
            //TODO: Write the content of XML file to a text file.
            dumpNode(doc.getChildNodes().item(0), "");
        } catch (Exception e) {
            System.err.println("Failed AXML decode: " + e);
            e.printStackTrace();
        }
    }

    /**
     * Extractsnthe API calls out dex file
     * @throws PackageManager.NameNotFoundException when package not found
     * @throws IOException when APK file path not found
     */
    private void extractAPICalls() throws PackageManager.NameNotFoundException, IOException {
        String packageName = "com.Slack";
        String apkFilePath = getPackageManager().getApplicationInfo(packageName, 0).sourceDir;
        ApiExtractor.extractApiCalls(apkFilePath);

    }



    /**
     * Code Help taken from https://github.com/xgouchet/AXML/blob/master/demo/src/DumpApkXml.java
     */
    private void dumpNode(Node node, String indent) throws FileNotFoundException {
        System.out.println(indent + node.getNodeName() + " " + attrsToString(node.getAttributes()) + " -> " + node.getNodeValue());
        NodeList children = node.getChildNodes();
        for (int i = 0, n = children.getLength(); i < n; ++i)
            dumpNode(children.item(i), indent + "   ");
    }

    //TODO: Store the extracted xml content in an output.xml file
    private static String attrsToString(NamedNodeMap attrs) {
        StringBuilder sb = new StringBuilder();
        sb.append('[');
        for (int i = 0, n = attrs.getLength(); i < n; ++i) {
            if (i != 0)
                sb.append(", ");
            Node attr = attrs.item(i);
            sb.append(attr.getNodeName()).append("=").append(attr.getNodeValue());
        }
        sb.append(']');
        return sb.toString();
    }
}
